
                   Dlang Floating Point Benchmarks
                         Development Notes
                         April 2nd, 2024
                    John Dougan <jdougan@acm.org>

 FBENCH
--------                      
This directory contains an implementation of the Fourmilab floating
point benchmark fbench in D Language (Dlang), conforming to D's
std.compiler major.minor compiler version 2.76.  This program has
been tested with the GNU Compiler Collection GDC compiler version
Ubuntu 11.4.0-1ubuntu1~22.04.

    http://www.gnu.org/software/gcc/

The program was ported from the fbench_ansi.c implementation, which
was mostly straightforward.  The mainline FP code was almost entirely
untouched (changed the cot() macro to a function them to a string
mixin and had to fix up the multi-dimensional array declarations).
Output reporting took a bit to untangle, having minor issues with
using the C stdlib string API from D.  I dropped the ACCURACY compile
option, in favour of a compile option to print the output at the end.
There is also an compile option to skip prompting the user to manage
a stopwatch.

I split the INTRIG internal trigonometry library out to a separate
file (math_fbench.d) to make it selectable with just a change of
import.  In order to make the library "@nogc nothrow pure @safe"  I
changed the error reporting from a bunch of writes to stderr followed
by an exit(0), to an assert(0) with a short constant message. Also,
all the constants were made immutable.  The internal math library can
be chosen by changing the constant internalMath at the top of
fbench.d.

I ran timing tests under on my 2.4 GHz Windows 11 gaming laptop in
Ubuntu Linux 22.04 in a WSL2 container.  The system math library was
selected.  After adjusting iteration counts to obtain a run time of
about five minutes, I ran three runs of the D program with an
iteration count of 782,608,690 with timings in seconds of:

real 302.68
user 302.66
sys 0.00
real 303.11
user 303.09
sys 0.00
real 303.50
user 303.47
sys 0.01

for a mean real time of 303.097 seconds.

The raw results are in trials-d.log as generated by `make
time_fbench_archival 2> trials-d.log`

For a control, I built with GCC a slightly modified ANSI C
implementation of the benchmark (removed stopwatch prompts).  Running
it for 782,608,690 iterations, it yielded timings of:

real 305.38
user 305.37
sys 0.00
real 305.26
user 305.25
sys 0.00
real 302.44
user 302.43
sys 0.00

with a mean real time of 304.360 seconds.

The relative execution time of the benchmark in D compared to the C
reference is very slightly faster:

    (303.097 / 304.360) * (782608690 / 782608690) = 0.996
    
Or, within limits of error, the same.  This is not unexpected, as both
are using the same compiler chain, libraries, options, and most of
the code.


 FFBENCH
---------
There is a half done port of ffbench_ansi.c also in this directory,
ffbench.d.  At present it is blowing up at runtime on a range
violation in the main Fourier calculations.  This being the kind of
error C will just blow past unnoticed I thought to see if anyne else
had dealt with it in a port.  I checked around and no one has ported
it to another language, at least in John Walker's github repository
or in a quick google search.  But the D port does compile cleanly,
and I don't think of my errors are huge.  I want to instrument the
ANSI C version and see if it goes out of range there but C is just
ignoreing it. John was pretty good at this, so I expect the problem
is on my end.

I have dropped the CALab output compile option, but since CALab is now
open source it may be re-added later. I added 2 compile options:
lowVolumeDebug and highVolumeDebug. The volume refers to the
potential cascade on output setting each weith to true can provide.
lowVolumeDebug enables printing mesaages that are outside the loops,
mostly do once stuff. highVolumeDebug gates the printing inside the
loops.

